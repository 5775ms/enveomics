{
  "tasks": [
    {
      "task": "AAsubs.log2ratio.rb",
      "description": ["Estimates the log2-ratio of different amino acids in",
        "homologous sites using an AAsubs file (see BlastPairwise.AAsubs.pl).",
	"It provides the point estimation (.obs file), the bootstrap of the",
	"estimation (.boot file) and the null model based on label-permutation",
	"(.null file)."],
      "see_also": ["BlastPairwise.AAsubs.pl"],
      "help_arg": "--help",
      "options": [
        {
	  "opt": "--input",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Input file in AAsubs format. It's a tab-delimited",
	    "table where each line corresponds to a substitution, the first",
	    "column corresponds to the compared protein IDs, the second",
	    "and third columns correspond to the AA on each protein, and the",
	    "fourth column indicates the length of the protein (not used by",
	    "this script."]
	},
	{
	  "opt": "--obs-file",
	  "arg": "out_file",
	  "description": ["Output file with the log2-ratios per amino acid.",
	    "By default, 'Input value'.obs."]
	},
	{
	  "opt": "--bootstrap-file",
	  "arg": "out_file",
	  "description": ["Output file with the bootstrap results of",
	    "log2-ratios per amino acid. By default, 'Input value'.boot."]
	},
	{
	  "opt": "--null-file",
	  "arg": "out_file",
	  "description": ["Output file with the permutation results of",
	    "log2-ratios per amino acid. By default, 'Input value'.null."]
	},
	{
	  "opt": "--overwrite",
	  "description": ["Overwrite existing files. By default, skip steps if",
	    "the files already exist."]
	},
	{
	  "opt": "--bootstraps",
	  "arg": "integer",
	  "default": 1000,
	  "description": "Number of bootstraps to run."
	},
	{
	  "opt": "--permutations",
	  "arg": "integer",
	  "default": 1000,
	  "description": "Number of permutations to run."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "Aln.cat.rb",
      "description": ["Concatenates several multiple alignments in FastA",
        "format into a single multiple alignment. The IDs of the sequences",
        "(or the ID prefixes, if using --ignore-after) must coincide across",
        "files."],
      "help_arg": "--help",
      "options": [
        {
          "opt": "--coords",
          "arg": "out_file",
          "description": "Output file of coordinates in RAxML-compliant format."
        },
        {
          "opt": "--ignore-after",
          "arg": "string",
          "description": ["Remove everything in the IDs after the specified",
            "string."]
        },
        {
          "opt": "--remove-invariable",
          "description": "Remove invariable sites.",
          "note": ["Invariable sites are defined as columns with only one",
            "state and undefined characters. Additional ambiguous characters",
            "may exist and should be declared using --undefined."]
        },
        {
          "opt": "--missing-char",
          "description": "Character denoting missing data.",
          "arg": "character",
          "default": "-"
        },
        {
          "opt": "--model",
          "description": "Name of the model to use if --coords is used.",
          "note": "See RAxML's documentation for additional information.",
          "arg": "string",
          "default": "AUTO"
        },
        {
          "opt": "--undefined",
          "arg": "string",
          "description": ["All characters to be regarded as 'undefined'. It",
            "should include all ambiguous and missing data chars. Ignored",
            "unless --remove-invariable."],
          "default": "-.Xx?"
        },
        {
          "opt": "--quiet",
          "description": "Run quietly (no STDERR output)."
        },
        {
          "name": "Input alignments",
          "arg": "in_file",
          "multiple_sep": " ",
          "mandatory": true,
          "description": "Input alignments in FastA format."
        },
        ">",
        {
          "name": "Output alignment",
          "arg": "out_file",
          "mandatory": true,
          "description": "Output concatenated alignment."
        }
      ]
    },
    {
      "task": "Aln.convert.pl",
      "description": "Translates between different alignment formats.",
      "help_arg": "",
      "requires": [
        {
          "description": "Perl library Bio::Perl",
          "test": "perl -MBio::AlignIO -e ''"
        }
      ],
      "options": [
        {
          "name": "In-format",
          "description": "Input file's format.",
          "mandatory": true,
          "arg": "select",
          "values": ["bl2seq", "clustalw", "emboss", "fasta", "maf", "mase",
            "mega", "meme", "metafasta", "msf", "nexus", "pfam", "phylip", "po",
            "prodom", "psi", "selex", "stockholm", "XMFA", "arp"]
        },
        {
          "name": "Out-format",
          "description": "Output file's format.",
          "mandatory": true,
          "arg": "select",
          "values": ["bl2seq", "clustalw", "emboss", "fasta", "maf", "mase",
            "mega", "meme", "metafasta", "msf", "nexus", "pfam", "phylip", "po",
            "prodom", "psi", "selex", "stockholm", "XMFA", "arp"]
        },
        "<",
        {
          "arg": "in_file",
          "mandatory": true
        },
        ">",
        {
          "arg": "out_file",
          "mandatory": true
        }
      ]
    },
    {
      "task": "AlphaDiversity.pl",
      "description": ["Takes a table of OTU abundance in one or more samples",
        "and calculates the Rao (Q_alpha), Rao-Jost (Q_alpha_eqv), Shannon",
        "(Hprime), and inverse Simpson (1_lambda) indices of alpha diversity",
        "for each sample."],
      "help_arg": "--help",
      "see_also": ["Chao1.pl"],
      "options": [
        {
          "name": "Input table",
          "opt": "-i",
          "arg": "in_file",
          "description": ["Columns: samples, rows: OTUs, first column: OTU",
            "names)."],
          "mandatory": true
        },
        {
          "name": "Discard rows",
          "opt": "-r",
          "arg": "integer",
          "description": "Number of rows to ignore.",
          "default": 0
        },
        {
          "name": "Discard left columns",
          "opt": "-c",
          "arg": "integer",
          "description": ["Number of columns to ignore after the first column",
            "(i.e., between the first column, containing the name of the",
            "categories, and the first column of abundance values)."],
          "default": 0
        },
        {
          "name": "Discard right columns",
          "opt": "-C",
          "arg": "integer",
          "description": "Number of columns to ignore at the end of each line.",
          "default": 0
        },
        {
          "name": "Delimiter",
          "opt": "-d",
          "arg": "string",
          "description": "Character (or string) separating columns.",
          "note": ["Supported escaped characters are: '\\t' (tabulation), and",
            "'\\0' (null bit)."],
          "default": "\\t"
        },
        {
          "name": "Headers",
          "opt": "-h",
          "description": ["The first row is assumed to have the names of the",
            "samples."]
        },
        {
          "name": "Distances file",
          "opt": "-D",
          "arg": "in_file",
          "description": ["A squared matrix (or bottom-left half matrix) with",
            "the distances between categories (OTUs or functions). The first",
            "column must contain the names of the categories, and it shouldn't",
            "have headers.  If not set, all distances are assumed to be one."],
          "note": "Only used for Rao."
        },
        {
          "name": "Skip Rao",
          "opt": "-R",
          "description": "Do not calculate Rao indices.",
          "note": ["This significantly decreases the total running time. Note",
            "that Rao indices are highly susceptible to precision errors, and",
            "shouldn't be trusted for very big numbers."]
        },
        {
          "name": "q for qD",
          "opt": "-q",
          "arg": "integer",
          "description": "Estimate the qD index (true diversity order q).",
          "default": 0
        },
        ">",
        {
          "arg": "out_file",
          "mandatory": true
        }
      ]
    },
    {
      "task": "BlastPairwise.AAsubs.pl",
      "description": ["Counts the different AA substitutions in the best hit",
        "blast alignments, from a BLASTP pairwise format output (-outfmt 0 in",
	"BLAST+, -m 0 in legacy BLAST)."],
      "see_also": ["AAsubs.log2ratio.rb"],
      "help_arg": "",
      "options": [
        {
	  "name": "Cigar char",
	  "arg": "select",
	  "values": ["+","_"],
	  "mandatory": true,
	  "description": ["Use '+' for similar substitutions, use '_' for non",
	    "similar substitutions."]
	},
	{
	  "name": "Blast M0",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Blast in 'pairwise text' format (-outfmt/-m 0)."
	},
	">",
	{
	  "name": "AA subs",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": ["A tab-delimited raw file with one substitution per",
	    "row and columns: (1) Name-of-query_Name-of-subject, (2)",
	    "AA-in-subject, (3) AA-in-query, (4) Total-Align-Length."]
	}
      ]
    },
    {
      "task": "BlastTab.addlen.rb",
      "description": ["Appends an extra column to a tabular BLAST with the",
        "length of the query or the subject sequence."],
      "help_arg": "--help",
      "options": [
        {
          "opt": "--fasta",
          "arg": "in_file",
          "description": "FastA file of the query or the subject.",
          "mandatory": true
        },
        {
          "opt": "--subject",
          "description": ["Use the subject column of the BLAST, by default the",
            "query column is used."],
          "note": "If used, the input FastA must contain subject sequences."
        },
        {
          "opt": "--quiet",
          "description": "Run quietly (no STDERR output)."
        },
        "<",
        {
          "arg": "in_file",
          "description": "Input tabular BLAST file.",
          "mandatory": true
        },
        ">",
        {
          "arg": "out_file",
          "description": "Output tabular BLAST file with additional column.",
          "mandatory": true
        }
      ]
    },
    {
      "task": "BlastTab.advance.bash",
      "description": ["Calculates the percentage of a partial BLAST result.",
        "The value produced slightly subestimates the actual advance, due to",
        "un-flushed output and trailing queries that could be processed but",
        "generate no results."],
      "help_arg": "",
      "requires": [
        {
	  "description": "GNU AWK",
	  "test": "awk --version"
	}
      ],
      "options": [
        {
          "name": "Blast",
          "arg": "in_file",
          "description": "Incomplete BLAST output.",
          "mandatory": true
        },
        {
          "name": "Query FastA",
          "arg": "in_file",
          "description": "FastA file with query sequences.",
          "mandatory": true
        }
      ]
    },
    {
      "task": "BlastTab.best_hit_sorted.pl",
      "description": "Filters a tabular BLAST to retain only the best matches.",
      "help_arg": "--help",
      "see_also": ["BlastTab.topHits_sorted.rb"],
      "options": [
        {
          "name": "Sort",
          "arg": "select",
          "values": ["sort","cat"],
          "mandatory": true,
          "description": ["Use 'sort' if your BLAST is not pre-sorted by the",
            "first column (or if you're not sure). Use 'cat' otherwise."]
        },
        {
          "name": "Input BLAST",
          "arg": "in_file",
          "multiple_sep": " ",
          "mandatory": true,
          "description": "Tabular BLAST file to filter."
        },
        "|",
        { "arg": "task" },
        ">",
        {
          "name": "Output BLAST",
          "arg": "out_file",
          "mandatory": true,
          "description": "Filetered tabular BLAST output."
        }
      ]
    },
    {
      "task": "BlastTab.catsbj.pl",
      "description": ["Generates a list of hits from a BLAST result",
        "concatenating the subject sequences. This can be used, e.g., to",
        "analyze BLAST results against draft genomes. This script creates two",
        "files using <map.bls> as prefix with extensions .rec (for the",
        "recruitment plot) and .lim (for the limits of the different sequences",
        "in <seq.fa>)."],
      "help_arg": "-h",
      "options": [
         {
           "opt": "-i",
           "name": "Identity",
           "description": "Minimum identity (in %) to report a result.",
           "arg": "float",
           "default": 70.0
         },
         {
           "opt": "-l",
           "name": "Length",
           "description": "Minimum alignment length to report a result.",
           "default": 60.0,
           "arg": "float"
         },
         {
           "opt": "-s",
           "name": "Subset",
           "description": ["The FastA provided is to be treated as a subset of",
             "the subject. By default, it expects all the subjects to be",
             "present in the BLAST."]
         },
         {
           "opt": "-q",
           "name": "Quiet",
           "description": "Run quietly."
         },
         {
           "name": "seq.fa",
           "description": "Subject sequences (ref) in FastA format.",
           "mandatory": true,
           "arg": "in_file"
         },
         {
           "name": "map.bls",
           "description": ["Mapping of the reads to the reference in Tabular",
             "BLAST format."],
           "mandatory": true,
           "arg": "in_file"
         }
      ]
    },
    {
      "task": "BlastTab.cogCat.rb",
      "description": ["Replaces the COG gene IDs in a BLAST for the COG",
        "category."],
      "help_arg": "--help",
      "options": [
        {
          "opt": "--whog",
          "arg": "in_file",
          "mandatory": true,
          "description": "COG's 'whog' file."
        },
        {
          "opt": "--blast",
          "arg": "in_file",
          "mandatory": true,
          "description": "Tabular BLAST file."
        },
        {
          "opt": "--cog",
          "description": "If set, returns the COG ID, not the COG category."
        },
        {
          "opt": "--desc",
          "description": "Includes COG description (requires --cog)."
        },
        {
          "opt": "--noverbose",
          "description": "Run quietly, but show warnings."
        },
        {
          "opt": "--quiet",
          "description": "Run quietly."
        },
        ">",
        {
          "arg": "out_file",
          "name": "COG Blast",
          "mandatory": true,
          "description": "Tabular BLAST with COG ID's or categories as subject."
        }
      ]
    },
    {
      "task": "BlastTab.filter.pl",
      "description": ["Extracts a subset of hits (queries or subjects) from a",
        "tabular BLAST."],
      "help_arg": "",
      "options": [
        {
          "name": "Subject",
          "opt": "-s",
          "description": ["If set, assumes that list.txt contains subject IDs.",
            "By default: assumes query IDs."]
        },
        {
          "name": "Inverse",
          "opt": "-i",
          "description": ["If set, reports the inverse of the list (i.e.,",
            "reports only hits absent in the list)."]
        },
        {
          "name": "list.txt",
          "arg": "in_file",
          "mandatory": true,
          "description": "List of IDs to extract."
        },
        {
          "name": "blast.txt",
          "arg": "in_file",
          "mandatory": true,
          "description": "Tabular BLAST file containing the superset of hits."
        },
        ">",
        {
          "name": "subset.txt",
          "arg": "out_file",
          "mandatory": true,
          "description": "Tabulat BLAST file to be created."
        }
      ]
    },
    {
      "task": "BlastTab.kegg_pep2path_rest.pl",
      "description": ["Takes a BLAST against KEGG_PEP (or KO) and retrieves",
        "the pathways in which the subject peptides are involved."],
      "requires": [
        {
          "description": "Perl library JSON",
          "test": "perl -MJSON -e ''"
        },
        {
          "description": "Perl library LWP::Simple",
          "test": "perl -MLWP::Simple -e ''"
        }
      ],
      "help_arg": "",
      "options": [
        {
          "name": "blast.txt",
          "arg": "in_file",
          "mandatory": true,
          "description": "Input tabular BLAST file."
        },
        {
          "name": "Cache file",
          "arg": "out_file",
          "description": ["(optional) File containing the saved cache. If",
            "unset, the cache won't be recoverable across instances of this",
            "script. It is strongly recommended to set a file.  Multiple",
            "parallel instances of this script may use the same cache file."]
        },
        ">",
        {
          "name": "output.txt",
          "arg": "out_file",
          "mandatory": true,
          "description": ["Tab-delimited output file, with the columns: (1)",
            "Query ID, (2) Subject ID, (3) Pathway ID, (4) Pathway (reference)",
            "description, (5) Organism."]
        }
      ]
    },
    {
      "task": "BlastTab.pairedHits.rb",
      "description": "Identifies the best hits of paired-reads.",
      "help_arg": "--help",
      "options": [
        {
          "opt": "--blast",
          "arg": "in_file",
          "mandatory": true,
          "description": "Input Tabular BLAST file.",
          "note": ["This script assumes that paired hits are next to each",
            "other. If this is not the case (e.g., because the blast was",
            "concatenated), you must sort the input before running this",
            "script."]
        },
        {
          "name": "Min score",
          "opt": "--minscore",
          "arg": "float",
          "default": 0.0,
          "description": "Minimum (summed) Bit-Score to consider a pair-match."
        },
        {
          "name": "Best hits",
          "opt": "--besthits",
          "arg": "integer",
          "default": 0,
          "description": ["Outputs top best-hits only (use 0 to output all the",
            "paired hits)."]
        },
        {
          "name": "Orientation",
          "opt": "--orient",
          "arg": "select",
          "values": [0,1,2,3,4],
          "default": 0,
          "description": ["Checks the orientation of the hit.  Values are: 0,",
            "no checking; 1, same direction; 2, inwards; 3, outwards; 4,",
            "different direction (i.e., 2 or 3)."]
        },
        {
          "name": "Sister prefix",
          "opt": "--sisprefix",
          "arg": "string",
          "default": "_",
          "description": ["Sister read number prefix in the name of the reads.",
            "Escape characters as dots (\\.), parenthesis (\\(, \\), \\[,",
            "\\]), other characters with special meaning in regular",
	    "expressions (\\*, \\+, \\^, \\$, \\|). This prefix allows regular",
	    "expressions (for example, use ':|\\.' to use any of colon or",
	    "dot). Note that the prefix will not be included in the base name",
	    "reported in the output."]
        },
        ">",
        {
          "arg": "out_file",
          "mandatory": true,
          "description": ["Tab-delimited flat file, with the following",
            "columns: (1) Query ID (without the \"sister\" identifier). (2)",
            "Subject ID. (3) Bit score (summed from both sister reads). (4/5)",
            "From/To (subject) coordinates for read 1. (6/7) From/To (subject)",
            "coordinates for read 2. (8) Reads orientation (1: same direction,",
            "2: inwards, 3: outwards). (9) Estimated insert size."]
        }
      ]
    },
    {
      "task": "BlastTab.seqdepth.pl",
      "description": "Estimates the sequencing depth of subject sequences.",
      "help_arg": "",
      "see_also": ["BlastTab.seqdepth_ZIP.pl", "BlastTab.seqdepth_nomedian.pl"],
      "options": [
        "cat",
        {
          "arg": "in_file",
          "multiple_sep": " ",
          "mandatory": true,
          "description": ["One or more Tabular BLAST files of reads vs genes",
            "(or contigs)."]
        },
        "|",
        {
          "name": "genes_or_ctgs.fna",
          "arg": "in_file",
          "mandatory": true,
          "description": ["A FastA file containing the genes or the contigs",
            "(db)."]
        },
        ">",
        {
          "name": "genes_or_ctgs.cov",
          "arg": "out_file",
          "mandatory": true,
          "description": ["A tab-delimited file with the following columns:",
            "(1) Subject ID. (2) Average sequencing depth. (3) Median",
            "sequencing depth. (4) Number of mapped reads. (5) Length of the",
            "subject sequence."]
        }
      ]
    },
    {
      "task": "BlastTab.seqdepth_ZIP.pl",
      "description": ["Estimates the average sequencing depth of subject",
        "sequences (genes or contigs) assuming a Zero-Inflated Poisson",
        "distribution (ZIP) to correct for non-covered positions. It uses the",
        "corrected method of moments estimators (CMMEs) as described by",
        "Beckett et al [1]. Note that [1] has a mistake in eq. (2.4), that",
        "should be: pi-hat-MM = 1 - (X-bar / lambda-hat-MM). Also note that a",
        "more elaborated mixture distribution can arise from coverage",
        "histograms (e.g., see [2] for an additional correction called 'tail",
        "distribution' and mixtures involving negative binomial) so take these",
        "results cum grano salis.\n [1]",
        "http://anisette.ucs.louisiana.edu/Academic/Sciences/MATH/stage/stat2012.pdf\n",
        "[2] Lindner et al, Bioinformatics, 2013."],
      "help_arg": "",
      "see_also": ["BlastTab.seqdepth.pl", "BlastTab.seqdepth_nomedian.pl"],
      "options": [
        "cat",
        {
          "name": "blast",
          "arg": "in_file",
          "multiple_sep": " ",
          "mandatory": true,
          "description": ["One or more Tabular BLAST files of reads vs genes",
            "(or contigs)."]
        },
        "|",
        { "arg": "task" },
        {
          "name": "genes_or_ctgs.fna",
          "arg": "in_file",
          "mandatory": true,
          "description": ["A FastA file containing the genes or the contigs",
            "(db)."]
        },
        ">",
        {
          "name": "genes_or_ctgs.cov",
          "arg": "out_file",
          "mandatory": true,
          "description": ["Output file with the following columns:",
            "(1) Subject ID.",
            "(2) Estimated average sequencing depth (CMME lambda).",
            "(3) Zero-inflation (CMME pi).",
            "(4) Observed average sequencing depth.",
            "(5) Observed median sequencing depth.",
            "(6) Observed median sequencing depth excluding zeroes.",
            "(7) Number of mapped reads.",
            "(8) Length of the subject sequence."]
        }
      ]
    },
    {
      "task": "BlastTab.seqdepth_nomedian.pl",
      "description": ["Estimates the sequencing depth of subject",
        "sequences. The values reported by this script may differ from those",
	"of BlastTab.seqdepth.pl, because this script uses the aligned length",
	"of the read while BlastTab.seqdepth.pl uses the aligned length of the",
	"subject sequence."],
      "help_arg": "",
      "see_also": ["BlastTab.seqdepth.pl", "BlastTab.seqdepth_ZIP.pl"],
      "options": [
        "cat",
	{
	  "arg": "in_file",
          "multiple_sep": " ",
          "mandatory": true,
          "description": ["One or more Tabular BLAST files of reads vs genes",
            "(or contigs)."]
	},
	"|",
        {
          "name": "genes_or_ctgs.fna",
          "arg": "in_file",
          "mandatory": true,
          "description": ["A FastA file containing the genes or the contigs",
            "(db)."]
        },
        ">",
        {
          "name": "genes_or_ctgs.cov",
          "arg": "out_file",
          "mandatory": true,
          "description": ["A tab-delimited file with the following columns:",
            "(1) Subject ID. (2) Average sequencing depth. (3) Number of",
	    "mapped reads. (4) Length of the subject sequence."]
        }
      ]
    },
    {
      "task": "BlastTab.subsample.pl",
      "description": ["Filters a BLAST output including only the hits produced",
        "by any of the given sequences as query."],
      "help_arg": "",
      "options": [
        {
	  "name": "blast.tab",
	  "mandatory": true,
	  "arg": "in_file",
	  "description": "BLAST output to be filtered (tabular format)."
	},
	{
	  "name": "sample.fa",
	  "mandatory": true,
	  "arg": "in_file",
	  "description": "Sequences to use as query (FastA format)."
	},
	">",
	{
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "The filtered BLAST output (tabular format)."
	}
      ]
    },
    {
      "task": "BlastTab.sumPerHit.pl",
      "description": ["Sums the weights of all the queries hitting each",
        "subject. Often (but not necessarily) the BLAST files contain only",
        "best matches. The weights can be any number, but a common use of this",
        "Script is to add up counts (weights are integers).  For example, in a",
        "BLAST of predicted genes vs some annotation source, the weights could",
        "be the number of reads recruited by each gene."],
      "help_arg": "-h",
      "options": [
        {
          "name": "Weights file",
          "opt": "-w",
          "arg": "in_file",
          "description": ["A two-columns tab-delimited file containing the",
            "weight of each query."]
        },
        {
          "name": "Minimum score",
          "opt": "-s",
          "arg": "float",
          "default": 0.0
        },
        {
          "name": "Minimum identity (%)",
          "opt": "-i",
          "arg": "float",
          "default": 0.0
        },
        {
          "name": "Queries",
          "opt": "-m",
          "arg": "integer",
          "default": 0,
          "description": "Maximum number of queries. Set to 0 for all."
        },
        {
          "name": "Normalize",
          "opt": "-n",
          "description": "Normalize weights by the number of hits per query."
        },
        {
          "name": "Include zeroes",
          "opt": "-z",
          "description": ["Add zero when weight is not found (by default:",
            "doesn't list them)."]
        },
        {
          "name": "Run quietly",
          "opt": "-q"
        },
        {
          "name": "blast",
          "arg": "in_file",
          "multiple_sep": " ",
          "mandatory": true,
          "description": "One or more BLAST files."
        },
        ">",
        {
          "arg": "out_file",
          "mandatory": true,
          "description": ["A two-columns tab-delimited file containing the",
            "summed weights per hit."]
        }
      ]
    },
    {
      "task": "BlastTab.taxid2taxrank.pl",
      "description": ["Takes a BLAST with NCBI Taxonomy IDs as subjects and",
        "replaces them by names at a given taxonomic rank."],
      "help_arg": "",
      "options": [
        {
	  "name": "tax_blast.txt",
	  "mandatory": true,
	  "arg": "in_file",
	  "description": ["BLAST output, where subject IDs are NCBI Taxonomy",
	    "IDs."]
	},
	{
	  "name": "nodes.dmp",
	  "mandatory": true,
	  "arg": "in_file",
	  "description": "Nodes file from NCBI Taxonomy.",
	  "source_url": "ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz"
	},
	{
	  "name": "names.dmp",
	  "mandatory": true,
	  "arg": "in_file",
	  "description": "Names file from NCBI Taxonomy.",
	  "source_url": "ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz"
	},
	{
	  "name": "rank",
	  "arg": "string",
	  "mandatory": true,
	  "default": "genus",
	  "description": ["The rank to be reported. All the reported nodes",
	    "will have the same rank. To see supported values, run:\n",
	    "`cut -f 5 nodes.dmp | sort -u`."]
	},
	{
	  "name": "Best-hit",
	  "arg": "select",
	  "values": ["yes", "no"],
	  "default": "yes",
	  "description": ["Should it take into account the best hit per query",
	    "only? This is: should it filter by best-hit?"]
	},
	">",
	{
	  "name": "taxrank_list.txt",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": ["BLAST-like output, where subject IDs are Taxonomy",
	    "names."]
	}
      ]
    },
    {
      "task": "BlastTab.topHits_sorted.rb",
      "description": ["Reports the top-N best hits of a BLAST, pre-sorted by",
        "query."],
      "help_arg": "--help",
      "see_also": "BlastTab.best_hit_sorted.pl",
      "options": [
        {
          "name": "Sort",
          "arg": "select",
          "values": ["sort","cat"],
          "mandatory": true,
          "description": ["Use 'sort' if your BLAST is not pre-sorted by the",
            "first column (or if you're not sure). Use 'cat' otherwise."]
	},
	{
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Tabular BLAST file."
	},
	"|",
	{ "arg": "task" },
	"--blast",
	"/dev/stdin",
	{
	  "opt": "--top",
	  "arg": "integer",
	  "default": 5,
	  "description": "Maximum number of hits to report for each query."
	},
	{
	  "opt": "--sort-by",
	  "arg": "select",
	  "values": ["bitscore", "evalue", "identity", "length"],
	  "default": "bitscore",
	  "description": "Parameter used to detect the 'best' hits."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly."
	}
      ]
    },
    {
      "task": "Chao1.pl",
      "description": ["Takes a table of OTU abundance in one or more samples",
        "and calculates the chao1 index (with 95% Confidence Interval) for",
	"each sample. To use it with Qiime OTU Tables, run it ignoring 1",
	"left column and with header."],
      "see_also": ["AlphaDiversity.pl"],
      "help_arg": "--help",
      "options": [
        {
	  "name": "Input file",
	  "opt": "-i",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Input table (columns:samples, rows:OTUs)."
	},
	{
	  "name": "Rows",
	  "opt": "-r",
	  "arg": "integer",
	  "default": 0,
	  "description": "Number of rows to ignore."
	},
	{
	  "name": "Left columns to ignore",
	  "opt": "-c",
	  "arg": "integer",
	  "default": 0,
	  "description": "Number of columns to ignore."
	},
	{
	  "name": "Right columns to ignore",
	  "opt": "-C",
	  "arg": "integer",
	  "default": 0,
	  "description": "Number of columns to ignore at the end."
	},
	{
	  "name": "Delimiter",
	  "opt": "-d",
	  "arg": "string",
	  "default": "\\t",
	  "description": "Delimiter between columns.",
	  "note": ["Supported escaped characters are: \\t (tabulation),",
	    "and \\0 (null bit)."]
	},
	{
	  "name": "Header",
	  "opt": "-h",
	  "description": ["If set, the first row is assumed to have the names",
	    "of the samples."]
	},
	">",
	{
	  "arg": "out_file",
	  "mandatory": true,
	  "description": ["Chao1 index and 95% CI bounds for each sample, in",
	    "tab-delimited format."]
	}
      ]
    },
    {
      "task": "CharTable.classify.rb",
      "description": ["Uses a dichotomous key to classify objects parsing a",
        "character table."],
      "help_arg": "--help",
      "options": [
        {
	  "opt": "--table",
	  "arg": "in_file",
	  "note": "Mandatory unless 'Example' is used.",
	  "description": ["Input table containing the states (columns) per",
	    "object (row). It must be tab-delimited and with row and column",
	    "names. Use 'Example' table to see an example."]
	},
	{
	  "opt": "--key",
	  "arg": "in_file",
	  "note": "Mandatory unless 'Example' is used.",
	  "description": ["Input table containing the dychotomous key in",
	    "linked style, defined in four columns (can contain #-lead comment",
	    "lines): (1) ID of the step, typically a sequential integer. (2)",
	    "Name of the character to evaluate. It must coincide with the",
	    "headers of -t. (3) First character decision (see below). (4)",
	    "Second character decision (see below).\nA character decision must",
	    "be formated as: state (must coincide with the values in -t),",
	    "colon (:), step to follow. If the state is * (star) any state",
	    "triggers the decision (this should be the norm in column 4). The",
	    "step to follow should be a step ID in square brackets, or the",
	    "name of the classification. Use 'Example' key to see an example."]
	},
	{
	  "opt": "--classification",
	  "arg": "out_file",
	  "description": ["Two-column table with the classification of the",
	    "input objects."]
	},
	{
	  "opt": "--newick",
	  "arg": "out_file",
	  "description": ["Tree containing all the classified objects. This",
	    "only makes sense for synoptic keys."]
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	},
	{
	  "opt": "--example",
	  "arg": "select",
	  "values": ["table", "key", "classification", "output"],
	  "description": ["Show an example file based on Van Ert et al 2007",
	    "(PLoS ONE 2(5):e461) and exit."],
	  "source_url": "http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0000461"
	}
      ]
    },
    {
      "task": "EBIseq2tax.rb",
      "description": ["Maps a list of EBI-supported IDs to their corresponding",
        "NCBI taxonomy using EBI RESTful API."],
      "warn": ["Avoid using this script on millions of entries at a time,",
        "since each entry elicits requests to EBI and NCBI servers."],
      "requires": [
        {
	  "description": "Ruby gem nokogiri",
	  "test": "ruby -r nokogiri -e ''"
	}
      ],
      "help_arg": "--help",
      "options": [
        {
	  "name": "IDs",
	  "opt": "--ids",
	  "arg": "string",
	  "description": "Comma-separated list of EBI IDs.",
	  "note": "Required unless 'Input file' is passed."
	},
	{
	  "name": "Input file",
	  "opt": "--infile",
	  "arg": "in_file",
	  "description": ["Raw text file containing the list of EBI IDs,",
	    "one per line."],
	  "note": "Required unless 'IDs' is passed."
	},
	{
	  "opt": "--database",
	  "arg": "string",
	  "default": "uniprotkb",
	  "description": "EBI database defining the EBI IDs."
	},
	{
	  "opt": "--ranks",
	  "arg": "string",
	  "description": "Comma-delimited list of taxonomic ranks to report.",
	  "default": "superkingdom,phylum,class,order,family,genus,species."
	},
	{
	  "opt": "--noheader",
	  "description": "Do not includ a header in the output."
	},
	{
	  "opt": "--taxids",
	  "description": "Return Taxonomy IDs instead of scientific names."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly."
	}
      ]
    },
    {
      "task": "FastA.N50.pl",
      "description": ["Calculates the N50 value of a set of sequences.",
        "Alternatively, it can calculate other N** values.  It also calculates",
        "the total number of sequences and the total added length."],
      "help_arg": "",
      "see_also": ["FastA.length.pl"],
      "options": [
        {
          "name": "Sequences",
          "arg": "in_file",
          "mandatory": true,
          "description": "A FastA file containing the sequences."
        },
        {
          "name": "Minimum length",
          "arg": "integer",
          "description": "Minimum length to take into consideration.",
          "default": 0
        },
        {
          "name": "NXX",
          "arg": "integer",
          "description": "Value NXX to calculate.",
          "default": 50
        }
      ]
    },
    {
      "task": "FastA.filter.pl",
      "description": "Extracts a subset of sequences from a FastA file.",
      "help_arg": "-h",
      "options": [
        {
	  "opt": "-r",
	  "description": ["Reverse list. Extracts sequences NOT present in the",
	    "list."]
	},
	{
	  "opt": "-q",
	  "description": "Runs quietly."
	},
	{
	  "name": "List",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "List of sequences to extract."
	},
	{
	  "name": "Sequences",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "FastA file containing the superset of sequences."
	},
	">",
	{
	  "name": "Subset",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "FastA file to be created."
	}
      ]
    },
    {
      "task": "FastA.filterLen.pl",
      "description": ""
    },
    {
      "task": "FastA.filterN.pl",
      "description": ["Filter sequences by N-content and presence of long",
        "homopolymers."],
      "help_arg": "",
      "options": [
        {
	  "name": "Sequences",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Input file in FastA format."
	},
	{
	  "name": "Content",
	  "arg": "float",
	  "default": 0.5,
	  "mandatory": true,
	  "description": ["A number between 0 and 1 indicating the maximum",
	    "proportion of Ns (1 to turn off, 0.5 by default)."]
	},
	{
	  "name": "Stretch",
	  "arg": "integer",
	  "default": 100,
	  "description": ["A number indicating the maximum number of",
	    "consecutive identical nucleotides allowed (0 to turn off, 100 by",
	    "default)."]
	},
	">",
	{
	  "name": "Filtered",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Filtered set of sequences."
	}
      ]
    },
    {
      "task": "FastA.gc.pl",
      "description": "Estimates the G+C content of sequences.",
      "help_arg": "",
      "options": [
        {
	  "name": "seqs.fa",
	  "arg": "in_file",
	  "multiple_sep": " ",
	  "mandatory": true,
	  "description": "One or more FastA files."
	},
	">",
	{
	  "name": "gc.txt",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "A table with the G+C content of the sequences."
	}
      ]
    },
    {
      "task": "FastA.interpose.pl",
      "description": ["Interpose sequences in FastA format from two files into",
        "one output file. If more than two files are provided, the script will",
	"interpose all the input files."],
      "warn": ["Please note that this script will check for the consistency of",
        "the names (assuming a pair of related reads contains the same name",
	"varying only in a trailing slash (/) followed by a digit. If you want",
	"to turn this feature off just set the $eval_T variable to zero. If",
	"you want to decrease the sampling period (to speed the script up) or",
	"increase it (to make it more sensitive to errors) just change $eval_T",
	"accordingly."],
      "help_arg": "",
      "options": [
        {
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Output FastA file."
	},
	{
	  "name": "Input FastA 1",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "First FastA file."
	},
	{
	  "name": "Input FastA 2",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Second FastA file."
	},
	{
	  "name": "Additional FastA",
	  "arg": "in_file",
	  "multiple_sep": " ",
	  "description": "Any additional FastA files (or none)."
	}
      ]
    },
    {
      "task": "FastA.length.pl",
      "description": "Returns the length of sequences in (multi-)FastA.",
      "see_also": ["FastA.N50.pl"],
      "help_arg": "",
      "options": [
        {
	  "arg": "in_file",
	  "multiple_sep": " ",
	  "mandatory": true,
	  "description": "One or more FastA files."
	},
	">",
	{
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "A table with the lengths of the sequences."
	}
      ]
    },
    {
      "task": "FastA.qlen.pl",
      "description": ["Calculates the quartiles of the length in a set of",
        "sequences. The Q2 is also known as the median.  Q0 is the minimum",
	"length, and Q4 is the maximum length. It also calculates TOTAL, the",
	"added length of the sequences in the file, and AVG, the average",
	"length."],
      "help_arg": "",
      "options": [
        {
	  "name": "Sequences",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "A FastA file containing the sequences."
	},
	{
	  "name": "Minimum Length",
	  "arg": "integer",
	  "default": 0,
	  "description": "The minimum length to take into consideration."
	}
      ]
    },
    {
      "task": "FastA.rename.pl",
      "description": ""
    },
    {
      "task": "FastA.revcom.pl",
      "description": ""
    },
    {
      "task": "FastA.slider.pl",
      "description": ""
    },
    {
      "task": "FastA.split.pl",
      "description": "",
      "see_also": ["FastQ.split.pl"]
    },
    {
      "task": "FastA.subsample.pl",
      "description": ""
    },
    {
      "task": "FastA.tag.rb",
      "description": ""
    },
    {
      "task": "FastQ.filter.pl",
      "description": ""
    },
    {
      "task": "FastQ.interpose.pl",
      "description": ""
    },
    {
      "task": "FastQ.offset.pl",
      "description": ""
    },
    {
      "task": "FastQ.split.pl",
      "description": ["Splits a FastQ file into several FastQ files. This",
        "script can be used to separate interposed sister reads using any even",
        "number of output files."],
      "help_arg": "",
      "see_also": ["FastA.split.pl"],
      "options": [
        {
          "name": "in_file.fq",
          "arg": "in_file",
          "mandatory": true,
          "description": "Input file in FastQ format."
        },
        {
          "name": "out_base",
          "arg": "out_file",
          "mandatory": true,
          "description": ["Prefix for the name of the output files. It will be",
            "appended with .<i>.fastq, where <i> is a consecutive number",
            "starting in 1."]
        },
        {
          "name": "no_files",
          "arg": "integer",
          "default": 2,
          "description": "Number of files to generate."
        }
      ]
    },
    {
      "task": "FastQ.tag.rb",
      "description": ""
    },
    {
      "task": "FastQ.toFastA.awk",
      "description": ""
    },
    {
      "task": "GenBank.add_fields.rb",
      "description": ""
    },
    {
      "task": "HMM.essential.rb",
      "description": ["Finds and extracts a collection of essential proteins",
        "suitable for genome completeness evaluation and phylogenetic",
	"analyses in Archaea and Bacteria."],
      "warn": ["Most complete bacterial genomes contain only 106/111 genes in",
        "this collection, therefore producing a completeness of 95.5%, and",
	"most archaeal genomes only contain 26/111 genes, producing a",
	"completeness of 23.4%. Use the options --bacteria and/or --archaea to",
	"ignore models often missing in one or both domains. Note that even",
	"with these options, some complete archaeal genomes result in very low",
	"values of completeness (e.g., Nanoarchaeum equitans returns 76.9%)."],
      "help_arg": "--help",
      "options": [
        {
	  "name": "Input file",
	  "opt": "--in",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "FastA file containing all the proteins in the genome."
	},
	{
	  "name": "Output file",
	  "opt": "--out",
	  "arg": "out_file",
	  "description": ["FastA file with the translated essential genes. By",
	    "default the file is not produced."]
	},
	{
	  "opt": "--per-model",
	  "arg": "out_file",
	  "description": ["Prefix of translated genes in independent files",
	    "with the name of the model appended. By default files are not",
	    "produced."]
	},
	{
	  "opt": "--report",
	  "arg": "out_file",
	  "description": ["Path to the report file. By default, the report is",
	    "sent to the STDOUT."]
	},
	{
	  "opt": "--bacteria",
	  "description": "If set, ignores models typically missing in Bacteria."
	},
	{
	  "opt": "--archaea",
	  "description": "If set, ignores models typically missing in Archaea."
	},
	{
	  "opt": "--genome-eq",
	  "description": ["If set, ignores models not suitable for",
	    "genome-equivalents estimations. See Rodriguez-R et al, 2015, ISME",
	    "J 9(9):1928-1940."],
	  "source_url": "http://www.nature.com/ismej/journal/vaop/ncurrent/full/ismej20155a.html"
	},
	{
	  "opt": "--rename",
	  "arg": "string",
	  "description": ["If set, renames the sequences with the string",
	    "provided and appends it with pipe (|) and the gene name (except",
	    "in --per-model files)."]
	},
	{
	  "opt": "--no-stats",
	  "description": ["If set, no statistics are reported on genome",
	    "evaluation."]
	},
	{
	  "opt": "--no-genes",
	  "description": ["If set, statistics won't include the lists of",
	    "missing/multi-copy genes."]
	},
	{
	  "opt": "--metagenome",
	  "description": ["If set, it allows for multiple copies of each gene",
	    "and turns on metagenomic report mode."]
	},
	{
	  "opt": "--list-models",
	  "description": ["If set, it only lists the models and exits.",
	    "Compatible with 'Archaea', 'Bacteria', 'Genome eq', and 'Quiet';",
	    "ignores all other parameters."]
	},
	{
	  "opt": "--bin",
	  "arg": "in_dir",
	  "description": "Directory containing the binaries of HMMer 3.0+."
	},
	{
	  "opt": "--threads",
	  "arg": "integer",
	  "default": 2,
	  "description": "Number of parallel threads to be used."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "HMMsearch.extractIds.rb",
      "description": ""
    },
    {
      "task": "JPlace.distances.rb",
      "description": ""
    },
    {
      "task": "JPlace.to_iToL.rb",
      "description": ""
    },
    {
      "task": "M5nr.getSequences.rb",
      "description": ""
    },
    {
      "task": "MeTaxa.distribution.pl",
      "description": ""
    },
    {
      "task": "MyTaxa.fragsByTax.pl",
      "description": ""
    },
    {
      "task": "MyTaxa.seq-taxrank.rb",
      "description": ""
    },
    {
      "task": "RAxML-EPA.to_iToL.pl",
      "description": ""
    },
    {
      "task": "RefSeq.download.bash",
      "description": ["Downloads a collection of sequences and/or annotations",
        "from NCBI's RefSeq."],
      "help_arg": "",
      "requires": [
        {
	  "description": "curl",
	  "test": "curl --version"
	}
      ],
      "options": [
        {
	  "name": "Organism",
	  "arg": "string",
	  "mandatory": true,
	  "description": ["The organism to download (e.g.,",
	    "Streptococcus_pneumoniae)."]
	},
	{
	  "name": "Extension",
	  "arg": "string",
	  "mandatory": true,
	  "default": ".*.gz",
	  "description": ["Extension to download. Common extensions include",
	    ".fna.gz (genomic sequences), .faa.gz (protein sequences),",
	    ".gff.gz (annotations), and .*.gz (all data)."]
	},
	{
	  "name": "Level",
	  "arg": "string",
	  "mandatory": true,
	  "default": "Any",
	  "description": ["Use only genomes with this assembly level. Common",
	    "levels are 'Complete Genome' and 'Contig'. By default, any",
	    "assembly level is allowed ('Any')."]
	},
	{
	  "name": "Directory",
	  "arg": "out_dir",
	  "description": ["Directory where the files are to be downladed.",
	    "By default, same as 'Organism'."]
	}
      ]
    },
    {
      "task": "SRA.download.bash",
      "description": ["Downloads the set of runs from a project, sample, or",
        "experiment in SRA."],
      "help_arg": "",
      "requires": [
        {
	  "description": "curl",
	  "test": "curl --version"
	}
      ],
      "options": [
        {
	  "name": "SRA ID",
	  "arg": "string",
	  "mandatory": true,
	  "description": "ID of the SRA Project, Sample, or Experiment."
	},
	{
	  "name": "dir",
	  "arg": "out_dir",
	  "description": ["Directory where the files are to be downladed. By",
	    "default, same as 'SRA ID'."]
	}
      ]
    },
    {
      "task": "Table.filter.pl",
      "description": ""
    },
    {
      "task": "Table.merge.pl",
      "description": ""
    },
    {
      "task": "Table.round.rb",
      "description": ""
    },
    {
      "task": "Table.split.pl",
      "description": ""
    },
    {
      "task": "Taxonomy.silva2ncbi.rb",
      "description": ["Re-formats Silva taxonomy into NCBI-like taxonomy dump",
        "files."],
      "help_arg": "--help",
      "options": [
        {
	  "opt": "--silvaranks",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Input Silva ranks file (e.g.,",
	    "tax_ranks_ssu_115.txt)."],
	  "source_url": "https://www.arb-silva.de/no_cache/download/archive/release_115/Exports/"
	},
	{
	  "opt": "--silvaref",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Input Silva ref alignment file (e.g.,",
	    "SSURef_NR99_115_tax_silva_full_align_trunc.fasta)."],
	  "source_url": "https://www.arb-silva.de/no_cache/download/archive/release_115/Exports/"
	},
	{
	  "opt": "--patch",
	  "arg": "in_file",
	  "description": ["If passed, it replaces the paths specified in the",
	    "patch."],
	  "source_url": "http://enve-omics.ce.gatech.edu/data/public_misc/patch_Silva_SSU_r115.txt"
	},
	{
	  "opt": "--seqinfo",
	  "arg": "out_file",
	  "description": ["If passed, it creates a CSV seq-info file",
	    "compatible with taxtastic."]
	},
	{
	  "opt": "--taxfile",
	  "arg": "out_file",
	  "description": "If passed, it creates a simple TSV taxonomy file."
	},
	{
	  "opt": "--ncbi",
	  "arg": "out_dir",
	  "description": ["If passed, output folder for the NCBI dump files",
	    "(e.g., taxdmp)."]
	},
	{
	  "opt": "--warns",
	  "description": "Verbously display warnings."
	}
      ]
    },
    {
      "task": "aai.rb",
      "description": ["Calculates the Average Amino acid Identity between two",
        "genomes."],
      "help_arg": "--help",
      "see_also": ["ani.rb", "rbm.rb"],
      "options": [
        {
          "opt": "--seq1",
          "arg": "in_file",
          "mandatory": true,
          "description": "FastA file containing the genome 1 (proteins).",
          "note": ["Alternatively, you can supply the GI of a genome",
            " (nucleotides) with the format gi:12345 instead of files."]
        },
        {
          "opt": "--seq2",
          "arg": "in_file",
          "mandatory": true,
          "description": "FastA file containing the genome 2.",
          "note": ["Alternatively, you can supply the GI of a genome",
            " (nucleotides) with the format gi:12345 instead of files."]
        },
        {
          "name": "Length",
          "opt": "--len",
          "arg": "integer",
          "description": "Minimum alignment length (in aa).",
          "default": 0
        },
        {
          "name": "Identity",
          "opt": "--id",
          "arg": "float",
          "description": "Minimum alignment identity (in %).",
          "default": 20.0
        },
        {
          "name": "Bit-score",
          "opt": "--bitscore",
          "arg": "float",
          "description": "Minimum bit score (in bits).",
          "default": 0.0
        },
        {
          "opt": "--hits",
          "arg": "float",
          "description": "Minimum number of hits.",
          "default": 50.0
        },
        {
          "name": "Executables",
          "opt": "--bin",
          "arg": "in_dir",
          "description": ["Path to the directory containing the binaries of",
            "the search program."]
        },
        {
          "opt": "--program",
          "arg": "select",
          "values": ["blast+","blast","blat"],
          "default": "blast+",
          "description": "Search program to be used.",
          "note": ["Make sure that you have installed the search program you",
            "want to use. If you have downloaded the program, but it's not",
            "installed, please use the --bin option above."]
        },
        {
          "opt": "--threads",
          "arg": "integer",
          "description": "Number of parallel threads to be used.",
          "default": 1
        },
        {
          "opt": "--sqlite3",
          "arg": "out_file",
          "description": ["Path to the SQLite3 database to create (or update)",
            "with the results."]
        },
        {
          "opt": "--name1",
          "arg": "string",
          "description": ["Name of --seq1 to use in --sqlite3. By default it's",
            "determined by the filename."]
        },
        {
          "opt": "--name2",
          "arg": "string",
          "description": ["Name of --seq2 to use in --sqlite3. By default it's",
            "determined by the filename."]
        },
        {
          "opt": "--lookup-first",
          "description": ["Indicates if the AAI should be looked up first in",
            "the database. Requires --sqlite3, --auto, --name1, and --name2.",
            "Incompatible with --res and --tab."]
        },
        {
          "opt": "--no-save-rbm",
          "description": ["Don't save the reciprocal best matches in the",
            "--sqlite3 database."]
        },
        {
          "name": "Precision",
          "opt": "--dec",
          "arg": "integer",
          "default": 2,
          "description": "Decimal positions to report."
        },
        {
          "name": "RBM",
          "opt": "--rbm",
          "arg": "out_file",
          "description": "Saves a file with the reciprocal best matches."
        },
        {
          "opt": "--out",
          "arg": "out_file",
          "description": ["Saves a file describing the alignments used for",
            "two-way AAI."]
        },
        {
          "name": "Result",
          "opt": "--res",
          "arg": "out_file",
          "description": "Saves a file with the final results."
        },
        {
          "opt": "--tab",
          "arg": "out_file",
          "description": ["Saves a file with the final two-way results in a",
            "tab-delimited form. The columns are (in that order): AAI,",
            "standard deviation, proteins used, proteins in the smallest",
            "genome."]
        },
        {
          "opt": "--auto",
          "description": ["ONLY outputs the AAI value in STDOUT (or nothing,",
            "if calculation fails)."]
        },
        {
          "opt": "--quiet",
          "description": "Run quietly (no STDERR output)."
        }
      ]
    },
    {
      "task": "ani.rb",
      "description": ["Calculates the Average Nucleotide Identity between two",
        "genomes."],
      "help_arg": "--help",
      "see_also": ["aai.rb","rbm.rb"],
      "options": [
        {
          "opt": "--seq1",
          "arg": "in_file",
          "mandatory": true,
          "description": "FastA file containing the genome 1.",
          "note": ["Alternatively, you can supply a GI with the format",
            "gi:12345 instead of files."]
        },
        {
          "opt": "--seq2",
          "arg": "in_file",
          "mandatory": true,
          "description": "FastA file containing the genome 2.",
          "note": ["Alternatively, you can supply a GI with the format",
            "gi:12345 instead of files."]
        },
        {
          "name": "Window",
          "opt": "--win",
          "arg": "integer",
          "description": "Window size in the ANI calculation (in bp).",
          "default": 1000
        },
        {
          "opt": "--step",
          "arg": "integer",
          "description": "Step size in the ANI calculation (in bp).",
          "default": 200
        },
        {
          "name": "Length",
          "opt": "--len",
          "arg": "integer",
          "description": "Minimum alignment length (in bp).",
          "default": 700
        },
        {
          "name": "Identity",
          "opt": "--id",
          "arg": "float",
          "description": "Minimum alignment identity (in %).",
          "default": 70.0
        },
        {
          "opt": "--hits",
          "arg": "integer",
          "description": "Minimum number of hits.",
          "default": 50
        },
        {
          "opt": "--nocorrection",
          "description": "Report values without post-hoc correction."
        },
        {
          "name": "Executables",
          "opt": "--bin",
          "arg": "in_dir",
          "description": ["Directory containing the binaries of the search",
            "program."]
        },
        {
          "opt": "--program",
          "arg": "select",
          "values": ["blast+", "blast", "blat"],
	  "default": "blast+",
          "description": "Search program to be used.",
          "note": ["Make sure that you have installed the search program you",
            "want to use. If you have downloaded the program, but it's not",
            "installed, please use the --bin option above."]
        },
        {
          "opt": "--threads",
          "arg": "integer",
          "description": "Number of parallel threads to be used.",
          "default": 1
        },
        {
          "opt": "--sqlite3",
          "arg": "out_file",
          "description": ["Path to the SQLite3 database to create (or update)",
            "with the results."]
        },
        {
          "opt": "--name1",
          "arg": "string",
          "description": ["Name of --seq1 to use in --sqlite3. By default",
            "it's determined by the filename."]
        },
        {
          "opt": "--name2",
          "arg": "string",
          "description": ["Name of --seq2 to use in --sqlite3. By default",
            "it's determined by the filename."]
        },
        {
          "opt": "--no-save-regions",
          "description": "Don't save the fragments in the --sqlite3 database."
        },
        {
          "opt": "--no-save-rbm",
          "description": ["Don't save the reciprocal best matches in the",
            "--sqlite3 database."]
        },
        {
          "opt": "--lookup-first",
          "description": ["Indicates if the ANI should be looked up first in",
            "the database. Requires --sqlite3, --auto, --name1, and --name2.",
            "Incompatible with --res and --tab."]
        },
        {
          "name": "Precision",
          "opt": "--dec",
          "arg": "integer",
          "description": "Decimal positions to report.",
          "default": 2
        },
        {
          "opt": "--out",
          "arg": "out_file",
          "description": ["Saves a file describing the alignments used for",
            "two-way ANI."]
        },
        {
          "name": "Result",
          "opt": "--res",
          "arg": "out_file",
          "description": "Saves a file with the final results."
        },
        {
          "opt": "--tab",
          "arg": "out_file",
          "description": ["Saves a file with the final two-way results in a",
            "tab-delimited form. The columns are (in that order): ANI,",
            "standard deviation, fragments used, fragments in the smallest",
            "genome."]
        },
        {
          "opt": "--auto",
          "description": ["ONLY outputs the ANI value in STDOUT (or nothing,",
            "if calculation fails)."]
        },
        {
          "opt": "--quiet",
          "description": "Run quietly (no STDERR output)."
        }
      ]
    },
    {
      "task": "gi2tax.rb",
      "description": ["Maps a list of NCBI GIs to their corresponding taxonomy",
        "using the NCBI EUtilities."],
      "warn": ["Avoid using this script on millions of entries at a time,",
        "since each entry elicits two requests to NCBI's servers."],
      "requires": [
        {
	  "description": "Ruby gem nokogiri",
	  "test": "ruby -r nokogiri -e ''"
	}
      ],
      "help_arg": "--help",
      "options": [
        {
	  "name": "GIs",
	  "opt": "--gis",
	  "arg": "string",
	  "description": "Comma-separated list of GIs.",
	  "note": "Required unless 'Input file' is passed."
	},
	{
	  "name": "Input file",
	  "opt": "--infile",
	  "arg": "in_file",
	  "description": ["Raw text file containing the list of GIs, one per",
	    "line."],
	  "note": "Required unless 'GIs' is passed."
	},
	{
	  "opt": "--protein",
	  "description": ["Use if the GIs are proteins. Otherwise, GIs are",
	    "assumed to be from the Nuccore Database."]
	},
	{
	  "opt": "--ranks",
	  "arg": "string",
	  "description": "Taxonomic ranks to report, separated by commas.",
	  "default": "superkingdom,phylum,class,order,family,genus,species"
	},
	{
	  "name": "No header",
	  "opt": "--noheader",
	  "description": "Do not include a header in the output."
	},
	{
	  "name": "Tax IDs",
	  "opt": "--taxids",
	  "description": "Return Taxonomy IDs instead of scientific names."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly."
	},
	">",
	{
	  "arg": "out_file",
	  "mandatory": true,
	  "description": ["Tab-delimited table with GIs and taxonomic",
	    "classification."]
	}
      ]
    },
    {
      "task": "ogs.annotate.rb",
      "description": ["Annotates Orthology Groups (OGs) using one or more",
        "reference genomes."],
      "see_also": ["ogs.mcl.rb"],
      "help_arg": "--help",
      "options": [
        {
	  "name": "Input file",
	  "opt": "--in",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Input file containing the OGs (as generated by",
	    "ogs.rb)."]
	},
	{
	  "name": "Output file",
	  "opt": "--out",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Output file containing the annotated OGs."
	},
	{
	  "name": "Annotations",
	  "opt": "-a",
	  "arg": "in_file",
	  "mandatory": true,
	  "multiple_sep": ",",
	  "description": ["Input file(s) containing the annotations. One or",
	    "more tab-delimited files with the gene names in the first column",
	    "and the annotation in the second."]
	},
	{
	  "opt": "--format",
	  "arg": "string",
	  "default": "(\\S+)\\.txt",
	  "description": ["Format of the filenames for the annotation files,",
	    "using regex syntax."]
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.core-pan.rb",
      "description": ["Subsamples the genomes in a set of Orthology Groups",
        "(OGs) and estimates the trend of core genome and pangenome sizes."],
      "help_arg": "--help",
      "requires": [
        {
	  "description": "Ruby gem json",
	  "test": "ruby -r json -e ''"
	}
      ],
      "see_also": ["ogs.mcl.rb"],
      "options": [
        {
	  "opt": "--ogs",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Input file containing the precomputed OGs."
	},
	{
	  "opt": "--replicates",
	  "arg": "integer",
	  "description": "Number of replicates to estimate.",
	  "default": 10
	},
	{
	  "opt": "--json",
	  "arg": "out_file",
	  "description": "Output file in JSON format."
	},
	{
	  "opt": "--tab",
	  "arg": "out_file",
	  "description": "Output file in tabular format."
	},
	{
	  "opt": "--threads",
	  "arg": "integer",
	  "description": "Children threads to spawn."
	},
	{
	  "opt": "--summary",
	  "arg": "out_file",
	  "description": ["Output file in tabular format with summary",
	    "statistics."]
	},
	{
	  "opt": "--auto",
	  "description": "Run completely quiertly (no STDERR or STDOUT)."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.extract.rb",
      "description": ["Extracts sequences of Orthology Groups (OGs) from",
        "genomes (proteomes)."],
      "help_arg": "--help",
      "see_also": ["ogs.mcl.rb"],
      "options": [
        {
	  "name": "Input file",
	  "opt": "--in",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Input file containing the OGs (as generated by",
	    "ogs.rb)."]
	},
	{
	  "name": "Output file",
	  "opt": "--out",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Output directory where to place extracted sequences."
	},
	{
	  "name": "Sequences",
	  "opt": "--seqs",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": ["Path to the proteomes in FastA format, using '%s'",
	    "to denote the genome. For example: /path/to/seqs/%s.faa."]
	},
	{
	  "opt": "--core",
	  "arg": "float",
	  "description": ["Use only OGs present in at least this fraction of",
	    "the genomes. To use only the strict core genome*, use --core 1."],
	  "note": ["* To use only the unus genome (OGs with exactly one gene",
	    "per genome), use: --core 1 --duplicates 1."]
	},
	{
	  "opt": "--duplicates",
	  "arg": "integer",
	  "description": ["Use only OGs with less than this number of",
	    "in-paralogs in a genome. To use only genes without in-paralogs*,",
	    "use --duplicates 1."],
	  "note": ["* To use only the unus genome (OGs with exactly one gene",
	    "per genome), use: --core 1 --duplicates 1."]
	},
	{
	  "opt": "--per-genome",
	  "description": ["If set, the output is generated per genome. By",
	    "default, the output is per OG."]
	},
	{
	  "opt": "--prefix",
	  "description": ["If set, each sequence is prefixed with the genome",
	    "name (or OG number, if --per-genome) and a dash."]
	},
	{
	  "opt": "--first",
	  "description": ["Get only one gene per genome per OG (first)",
	    "regardless of in-paralogs. By default all genes are extracted."]
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.mcl.rb",
      "description": ["Identifies Orthology Groups (OGs) in Reciprocal Best",
        "Matches (RBM) between all pairs in a collection of genomes, using the",
	"Markov Cluster Algorithm."],
      "see_also": ["ogs.annotate.rb", "ogs.core-pan.rb", "ogs.extract.rb",
        "ogs.stats.rb"],
      "help_arg": "--help",
      "options": [
        {
	  "opt": "--out",
	  "arg": "out_file",
	  "mandatory": true,
	  "description": "Output file containing the detected OGs."
	},
	{
	  "opt": "--dir",
	  "arg": "in_dir",
	  "description": "Directory containing the RBM files.",
	  "note": "Mandatory, unless --abc is set to a non-empty file."
	},
	{
	  "opt": "--format",
	  "arg": "string",
	  "description": ["Format of the filenames for the RBM files (within",
	    "--dir), using regex syntax."],
	  "default": "(\\S+)-(\\S+)\\.rbm"
	},
	{
	  "opt": "--inflation",
	  "arg": "float",
	  "description": "Inflation parameter for MCL clustering.",
	  "default": 1.5
	},
	{
	  "opt": "--blind",
	  "description": ["If set, computes clusters without taking bitscore",
	    "into account."]
	},
	{
	  "opt": "--evalue",
	  "description": ["If set, uses the e-value to weight edges, instead",
	    "of the default Bit-Score."]
	},
	{
	  "opt": "--identity",
	  "description": ["If set, uses the identity to weight edges, instead",
	    "of the default Bit-Score."]
	},
	{
	  "opt": "--best-match",
	  "description": ["If set, it assumes best-matches instead reciprocal",
	    "best matches."]
	},
	{
	  "opt": "--mcl-bin",
	  "arg": "in_dir",
	  "description": ["Path to the directory containing the mcl binaries.",
	    "By default, assumed to be in the PATH."]
	},
	{
	  "name": "abc",
	  "arg": "out_file",
	  "opt": "--abc",
	  "description": "Use this abc file instead of a temporal file."
	},
	{
	  "opt": "--threads",
	  "arg": "integer",
	  "default": 2,
	  "description": "Number of threads to use."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.rb",
      "description": ["Identifies Orthology Groups (OGs) in Reciprocal Best",
        "Matches (RBM) between all pairs in a collection of genomes."],
      "warn": ["This script suffers from chaining effect and is very",
        "sensitive to spurious connections, because it applies a greedy",
	"clustering algorithm. For most practical purposes, the use of this",
	"script is discouraged and `ogs.mcl.rb` should be preferred."],
      "help_arg": "--help",
      "see_also": ["ogs.mcl.rb"],
      "options": [
        {
	  "opt": "--out",
	  "mandatory": true,
	  "arg": "out_file",
	  "description": "Output file containing the detected OGs."
	},
	{
	  "opt": "--dir",
	  "arg": "in_dir",
	  "description": "Directory containing the RBM files.",
	  "note": "Required unless --pre-ogs is passed."
	},
	{
	  "opt": "--pre-ogs",
	  "arg": "in_file",
	  "multiple_sep": ",",
	  "description": "Pre-computed OGs file(s), separated by commas."
	},
	{
	  "opt": "--unchecked",
	  "description": "Do not check internal redundancy in OGs."
	},
	{
	  "opt": "--format",
	  "arg": "string",
	  "default": "(\\S+)-(\\S+)\\.rbm",
	  "description": ["Format of the filenames for the RBM files (within",
	    "-d), using regex syntax."]
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "ogs.stats.rb",
      "description": ["Estimates some descriptive statistics on a set of",
        "Orthology Groups (OGs)."],
      "see_also": ["ogs.mcl.rb"],
      "help_arg": "--help",
      "requires": [
        {
	  "description": "Ruby gem json",
	  "test": "ruby -r json -e ''"
	}
      ],
      "options": [
        {
	  "opt": "--ogs",
	  "arg": "in_file",
	  "mandatory": true,
	  "description": "Input file containing the precomputed OGs."
	},
	{
	  "opt": "--json",
	  "arg": "out_file",
	  "description": "Output file in JSON format."
	},
	{
	  "opt": "--tab",
	  "arg": "out_file",
	  "description": "Output file in tabular format."
	},
	{
	  "opt": "--transposed-tab",
	  "arg": "out_file",
	  "description": "Output file in transposed tabular format."
	},
	{
	  "opt": "--auto",
	  "description": "Run completely quiertly (no STDERR or STDOUT)."
	},
	{
	  "opt": "--quiet",
	  "description": "Run quietly (no STDERR output)."
	}
      ]
    },
    {
      "task": "rbm.rb",
      "description": ["Finds the reciprocal best matches between two sets of",
        "sequences."],
      "help_arg": "--help",
      "options": [
        {
	  "opt": "--seq1",
          "arg": "in_file",
          "mandatory": true,
          "description": "FastA file containing the genome 1."
	},
        {
	  "opt": "--seq2",
          "arg": "in_file",
          "mandatory": true,
          "description": "FastA file containing the genome 2."
	},
	{
	  "opt": "--nucl",
	  "description": ["Sequences are assumed to be nucleotides (proteins",
	    "by default)."]
	},
        {
          "name": "Length",
          "opt": "--len",
          "arg": "integer",
          "description": "Minimum alignment length (in residues).",
          "default": 0
        },
	{
	  "name": "Fraction",
	  "opt": "--fract",
	  "arg": "float",
	  "default": 0.0,
	  "description": ["Minimum alignment length (as a fraction of the",
	    "query). If set, requires BLAST+ (see --program)."]
	},
        {
          "name": "Identity",
          "opt": "--id",
          "arg": "float",
          "description": "Minimum alignment identity (in %).",
          "default": 0.0
        },
	{
	  "name": "Bit score",
	  "opt": "--score",
	  "arg": "float",
	  "default": 0.0,
	  "description": "Minimum alignment score (in bits)."
	},
        {
          "name": "Executables",
          "opt": "--bin",
          "arg": "in_dir",
          "description": ["Directory containing the binaries of the search",
            "program."]
        },
        {
          "opt": "--program",
          "arg": "select",
          "values": ["blast+", "blast", "blat"],
	  "default": "blast+",
          "description": "Search program to be used. Default: blast+.",
          "note": ["Make sure that you have installed the search program you",
            "want to use. If you have downloaded the program, but it's not",
            "installed, please use the --bin option above."]
        },
        {
          "opt": "--threads",
          "arg": "integer",
          "description": "Number of parallel threads to be used.",
          "default": 1
        },
        {
          "opt": "--quiet",
          "description": "Run quietly (no STDERR output)."
        }
      ]
    }
  ],
  "categories": {
    "Sequence similarity search": {
      "Statistics": [
        "BlastTab.advance.bash",
        "BlastTab.seqdepth.pl",
        "BlastTab.seqdepth_nomedian.pl",
        "BlastTab.seqdepth_ZIP.pl",
        "BlastTab.sumPerHit.pl"
      ],
      "Manipulation": [
        "BlastTab.addlen.rb",
        "BlastTab.best_hit_sorted.pl",
        "BlastTab.catsbj.pl",
        "BlastTab.cogCat.rb",
        "BlastTab.filter.pl",
        "BlastTab.kegg_pep2ko_rest.pl",
        "BlastTab.kegg_pep2path_rest.pl",
        "BlastTab.pairedHits.rb",
        "BlastTab.subsample.pl",
        "BlastTab.taxid2taxrank.pl",
        "BlastTab.topHits_sorted.rb"
      ],
      "Execution": [
        "aai.rb",
        "ani.rb",
        "rbm.rb"
      ]
    },
    "Sequence analyses": {
      "Statistics": [
        "FastA.gc.pl",
        "FastA.length.pl",
        "FastA.N50.pl",
        "FastA.qlen.pl"
      ],
      "Manipulation": [
        "FastA.filter.pl",
        "FastA.filterN.pl",
        "FastA.interpose.pl",
        "FastA.rename.pl",
        "FastA.revcom.pl",
        "FastA.slider.pl",
        "FastA.split.pl",
        "FastA.subsample.pl",
        "FastA.tag.rb",
        "FastQ.filter.pl",
        "FastQ.interpose.pl",
        "FastQ.offset.pl",
        "FastQ.split.pl",
        "FastQ.tag.rb",
        "FastQ.toFastA.awk"
      ]
    },
    "Diversity": {
      "OTUs": [
        "AlphaDiversity.pl",
        "Chao1.pl"
      ]
    },
    "Annotation": {
      "Database mapping": [
        "BlastTab.kegg_pep2ko_rest.pl",
        "BlastTab.kegg_pep2path_rest.pl",
        "BlastTab.taxid2taxrank.pl",
        "EBIseq2tax.rb",
        "gi2tax.rb",
        "M5nr.getSequences.rb",
        "RefSeq.download.bash"
      ],
      "Tables": [
        "GenBank.add_fields.rb",
        "MyTaxa.fragsByTax.pl",
        "Table.filter.pl",
        "Table.merge.pl",
        "Table.round.rb",
        "Table.split.pl"
      ],
      "Search": [
        "HMM.essential.rb",
        "HMMsearch.extractIds.rb",
        "ogs.annotate.rb",
        "ogs.core-pan.rb",
        "ogs.extract.rb",
        "ogs.mcl.rb",
        "ogs.stats.rb",
	"ogs.rb"
      ]
    },
    "Other data": {
      "Phylogenetic and other distances": [
        "CharTable.classify.rb",
        "JPlace.to_iToL.rb"
      ],
      "Taxonomic": [
        "CharTable.classify.rb",
        "EBIseq2tax.rb",
        "gi2tax.rb",
        "MyTaxa.fragsByTax.pl",
        "MyTaxa.seq-taxrank.rb",
        "Taxonomy.silva2ncbi.rb"
      ],
      "Alignments": [
        "Aln.cat.rb",
        "Aln.convert.pl"
      ]
    }
  }
}
